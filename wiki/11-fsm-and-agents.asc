== 11. finite State Machines and Agents

:numbered!:

In this chapter:

* Finite State Machine
* Agents
* Shared state

Actor에서 상태를 표현하는 방법:

. class attributes: mutable 상태를 class attributes로 놓고 구현하는 방식(aggregator 예제에서 보여줬었음)
. become/unbecome: state-dependent router 구현하는데 사용했었음.
. Finite State Machine Modeling: 이 장에서 설명하는 것.
.* 여러 쓰레드에서 상태를 공유할 수 있음. => 장점이 뭐라는 거지?
.* locking도 안씀.
.* event를 이용해서 비동기로 동작함.
.* clear하고 maintainable한 코드가 가능하다.

=== 11.1 Using a Finite State Machine

==== 11.1.1 Quick introduction of Finite State Machine

Finite State Machine 이란?:

image::img/figure-11-1.png[]

==== 11.1.2 Creating an FSM Model

이 장에서 구현할 Inventory 예제:

image::img/figure-11-2.png[]

Inventory 예제의 FSM:

image::img/figure-11-3.png[]

==== 11.2 Implementation of an FSM Model

become/unbecome 으로도 FSM을 구현할 수 있지만 Akka는 FSM Trait을 제공한다. 좀 더 clear하고 maintainable한 코드를 만들 수 있다. 멋지지 않니?

==== 11.2.1 Implementing transitions

[source, scala]
----
import akka.actor.{Actor, FSM}
class Inventory() extends Actor with FSM[State, StateData] { // <1>
    ...
}
----
<1> FSM Trait은 타입 파라미터가 두 개 필요하다.

* State: 상태의 super sealed Trait
* StateData: 실제 State 정보가 담기는 데이터

===== Defining the state

.FSM의 State 정의
[source, scala]
----
// <1>
sealed trait State
case object WaitForRequests extends State
case object ProcessRequest extends State
case object WaitForPublisher extends State
case object SoldOut extends State
case object ProcessSoldOut extends State

// <2>
case class StateData(nrBooksInStore:Int, pendingRequests:Seq[BookRequest])

// <3>
class Inventory() extends Actor with FSM[State, StateData] {
        startWith(WaitForRequests, new StateData(0,Seq()))
    ...
}
----
<1> FSM의 State들
<2> 실제 상태 정보
<3> FSM의 초기 State 정의.

===== Defining the transitons

.FSM에서 사용하는 Event와 Response
[source, scala]
----
// events
case class BookRequest(context: AnyRef, target: ActorRef)
case class BookSupply(nrBooks: Int)
case object BookSupplySoldOut
case object Done
case object PendingRequests

//responses
case object PublisherRequest
case class BookReply(context: AnyRef, reserveId: Either[String, Int])
----

[source,scala]
----
when(WaitForRequests) { // <1>
    case Event(request:BookRequest, data:StateData) => { // <2>
        val newStateData = data.copy(
            // <3>
            pendingRequests = data.pendingRequests :+ request)
        if (newStateData.nrBooksInStore > 0) {
            goto(ProcessRequest) using newStateData // <4>
        } else {
            goto(WaitForPublisher) using newStateData // <5>
        }
    }
    case Event(PendingRequests, data:StateData) => { // <6>
        if (data.pendingRequests.isEmpty) { // <7>
            stay
        } else if(data.nrBooksInStore > 0) { // <8>
            goto(ProcessRequest)
        } else { // <9>
            goto(WaitForPublisher)
        }
    }
}
----
<1> WaitForRequests 상태에서:
<2> BookRequest 이벤트가 발생하면:
<3> data.pendingRequests에 request를 저장한다..
<4> 재고가 있으면 `goto`로 ProcessRequest 상태로 전이한다.
<5> 재고가 없으면 `goto`로 WaitForPublisher 상태로 전이한다.
<6> PendingRequests 이벤트가 발생하면(일종의 Reprocess나 Refresh):
<7> pendingRequests가 없으면 stay로 상태를 유지한다.
<8> 재고가 있으면 ProcessRequest 상태로 전이한다.
<9> 재고가 없으면 WaitForPublisher 상태로 전이한다.

[source, scala]
----
when(WaitForPublisher) { // <1>
    case Event(supply: BookSupply, data: StateData) => { // <2>
        goto(ProcessRequest) using data.copy(
            nrBooksInStore = supply.nrBooks) // <3>
    }
    case Event(BookSupplySoldOut, _) => { // <4>
        goto(ProcessSoldOut) // <5>
    }
}
----
<1> WaitForPublisher 상태에서:
<2> BookSupply 이벤트가 발생하면:
<3> 공급받은 책으로 업데이트 하고 ProcessRequest 상태로 전이한다.

[source, scala]
----
when(ProcessRequest) { // <1>
    case Event(Done, data: StateData) => { // <2>
        goto(WaitForRequests) using data.copy(
            nrBooksInStore = data.nrBooksInStore - 1,
            pendingRequests = data.pendingRequests.tail) // <3>
    }
}
----
<1> ProcessRequest 상태에서:
<2> Done 이벤트가 발생하면:
<3> **요청을 하나 처리하고** WaitForRequests 상태로 전이한다.

[source, scala]
----
when(SoldOut) { // <1>
    // <2>
    case Event(request: BookRequest, data: StateData) => {
        goto(ProcessSoldOut) using new StateData(0, Seq(request)) // <3>
    }
}
----
<1> SoldOut 상태에서:
<2> BookRequest 발생하면:
<3> 들어온 request를 상태 정보에 추가하고 ProcessSoldOut으로 전이한다.

[source, scala]
----
when(ProcessSoldOut) { // <1>
    case Event(Done, data: StateData) => { // <2>
        goto(SoldOut) using new StateData(0, Seq()) // <3>
    }
}
----
<1> ProcessSoldOut 상태에서:
<2> Done 이벤트가 발생하면:
<3> 상태를 완전히 비우고 SoldOut 상태로 전이한다.

[source, scala]
----
whenUnhandled { // <1>
    // common code for all states
    case Event(request: BookRequest, data: StateData) => { // <2>
        stay using data.copy(
            pendingRequests = data.pendingRequests :+ request)// <3>
    }
    case Event(e, s) => { // <4>
        log.warning("received unhandled request {} in state {}/{}",
        e, stateName, s)
        stay
    }
}
----
<1> 어느 상태에서든지 Unhandled 이벤트가 있으면:
<2> BookRequest 이벤트가 Unhandled면:
<3> request를 상태에 추가한고 현재 상태를 유지한다.
<4> 새는 Event가 있으면 로그를 남긴다.

==== 11.2.2 Implementing the entry actions

===== Actions on transitions

Entry action이랑 Exit action가 있지만 Entry action만 살펴본다.

[source, scala]
----
onTransition { // <1>
    case State1 -> State2 => {} // <2>
    case _ -> State2 => {} // <3>
    case State1 -> _ => {} // <4>
}
----
<1> Transition시 실행하는 Action을 구현한다.
<2> State1에서 State2로 전이할 때 실행하는 Action.
<3> State2의 Entry Action
<4> State1의 Exit Action(일거라 생각하는 데 확인이 필요하다. 책에서 찬밥이다)

.Entry Action들
[source, scala]
----
onTransition {
    case _ -> WaitForRequests => { // <1>
        if (!nextStateData.pendingRequests.isEmpty) { // <2>
            // go to next state
            self ! PendingRequests
        }
    }
    case _ -> WaitForPublisher => { // <3>
        //send request to publisher
        publisher ! PublisherRequest // <4>
    }
    case _ -> ProcessRequest => { // <5>
        val request = nextStateData.pendingRequests.head
        reserveId += 1 // <6>
        request.target !
            new BookReply(request.context, Right(reserveId)) // <7>
        self ! Done // <8>
    }
    case _ -> ProcessSoldOut => { // <9>
        nextStateData.pendingRequests.foreach(request => { // <10>
            request.target ! //
                new BookReply(request.context, Left("SoldOut"))
        })
        self ! Done // <12>
    }
}
----
<1> WaitForRequests의 Entry Action:
<2> pendingRequests가 있으면 PendingRequests 이벤트 fire.
<3> WaitForPublisher의 Entry Action:
<4> publisher에 PublisherRequest를 보낸다.
<5> ProcessRequest의 Entry Action:
<6> 책 id를 부여하고
<7> BookRequest를 보낸 Actor에 BookReply를 보낸다.
<8> Done 이벤트 fire
<9> ProcessSoldOut의 Entry Action:
<10> pendingReuqests에 전부 BookReply("SoldOut") 메시지를 보낸다.
<11> Done 이벤트 fire

[source, scala]
----
class Inventory(publisher:Actor) extends Actor
        with FSM(State, StateData){
    startWith...

    when...

    onTransition...

    initialize // <1>
}
----
<1> initialize를 호출하면 FSM을 초기화하고 시작한다.

===== Testing the FSM

.Mock Publisher
[source, scala]
----
class Publisher(totalNrBooks: Int, nrBooksPerRequest: Int)
        extends Actor{
    var nrLeft = totalNrBooks
    def receive = {
        case PublisherRequest => { // <1>
            if (nrLeft == 0)
                sender ! BookSupplySoldOut
            else {
                val supply = min(nrBooksPerRequest, nrLeft)
                nrLeft -= supply
                sender ! new BookSupply(supply)
            }
        }
    }
}
----
<1> PublisherRequest 메시지를 받으면 BookSupply(supply) 메시지로 책을 공급해주거나 BookSupplySoldOut 메시지로 책없다고 알린다.

[source, scala]
----
val publisher = system.actorOf(Props(new Publisher(2, 2)))
val inventory = system.actorOf(Props(new Inventory(publisher)))
val stateProbe = TestProbe()

inventory ! new SubscribeTransitionCallBack(stateProbe.ref) // <1>
stateProbe.expectMsg(
    new CurrentState(inventory, WaitForRequests)) // <2>
----
<1> FSM에 SubscribeTransitionCallBack을 보내면 State Transition을 받받을 수 있다.
<2> 일단 CurrentState를 응답으로 받는다.

[source, scala]
----
val replyProbe = TestProbe()
inventory ! new BookRequest("context1", replyProbe.ref) // <1>
stateProbe.expectMsg( // <2>
    new Transition(inventory, WaitForRequests, WaitForPublisher))
stateProbe.expectMsg( // <3>
    new Transition(inventory, WaitForPublisher, ProcessRequest))
stateProbe.expectMsg( // <4>
    new Transition(inventory, ProcessRequest, WaitForRequests))
replyProbe.expectMsg(new BookReply("context1", Right(1))) // <5>
----
<1> BookRequest 이벤트를 fire.
<2> 책이 없기 때문에 Publisher에게 PublisherRequest를 보내고 WaitForPublisher 상태로 변경하고 기다린다.
<3> publisher에서 BookSupply 메시지를 받으면 재고를 업데이트하고 ProcessRequest 상태로 전이한다.
<4> ProcessRequest에서 BookReply를 보내고 다시 WaitForRequests로 돌아간다.
<5> BookReply를 잘 받았는지 확인한다.

[source, scala]
----
inventory ! new BookRequest("context2", replyProbe.ref) // <1>
stateProbe.expectMsg(
    new Transition(inventory, WaitForRequests, ProcessRequest)) // <2>
stateProbe.expectMsg(
    new Transition(inventory, ProcessRequest, WaitForRequests)) // <3>
replyProbe.expectMsg(new BookReply("context2", Right(2)))
----
<1> BookRequest를 다시 보낸다.
<2> 이번엔 책이 있으니까 ProcessRequest로 전이해서 책을 보낸다.
<3> BookReply를 보내고 다시 WaitForRequests로 돌아 간다.
<4> 받았다! BookReply

[source, scala]
----
inventory ! new BookRequest("context3", replyProbe.ref) // <1>
stateProbe.expectMsg(
    new Transition(inventory, WaitForRequests, WaitForPublisher)) // <2>
stateProbe.expectMsg(
    new Transition(inventory, WaitForPublisher, ProcessSoldOut)) // <3>
replyProbe.expectMsg(
    new BookReply("context3", Left("SoldOut"))) // <4>
stateProbe.expectMsg(
    new Transition(inventory, ProcessSoldOut, SoldOut)) // <5>
----
<1> 다시 BookRequest를 보낸다.
<2> 책이 떨어졌으므로 Publisher에 PublisherRequest를 보내고 WaitForPublisher 상태로 전이
<3> publisher도 책이 없어서 BookSupplySoldOut 메시지를 보내 왔다. ProcessSoldOut상태로 전이해서 SoldOut을 메시지를 보낸다.
<4> 받았다. BookReply("SoldOut")
<5> pendingRequests에 다 SoldOut 메시지로 응답하고 SoldOut 상태로 전이한다.

==== 11.2.3 Timers within FSM

Publisher가 먹어버리면 timeout으로 빠져나온다:

image::img/figure-11-6.png[]

[source, scala]
----
when(WaitForPublisher, stateTimeout = 5 seconds) { // <1>
    case Event(supply:BookSupply, data:StateData) => {
        goto(ProcessRequest) using data.copy(
            nrBooksInStore = supply.nrBooks)
    }
    case Event(BookSupplySoldOut, _) => {
        goto(ProcessSoldOut)
    }
    case Event(StateTimeout,_) => goto(WaitForRequests) // <2>
}
----
<1> WaitForPublisher상태에 들어온후 5초 후 StateTimeout 이벤트 fire
<2> StateTimeout 이벤트가 발생하면 WaitForRequests로 돌아간다.

[NOTE]
====
다른 상태로 전이한 후의 StateTimeout 메시지는 어떻게 될까?

처리되지 않는다지만
. WhenUnhandled로 넘어가거나 deadletter로 빠지는 건 아닐까?
. 아니면 아에 timer가 꺼지는 걸까?
====

[source, scala]
----
goto(WaitForPublisher) using (newData) forMax (5 seconds) // <1>
----
<1> WaitForPublisher 상태에 정의한 timer를 override한다. 그러니까 WaitForPublisher로 전이하되 `when...`에 정의한 시간이 아니라 `forMax`에 명시한 시간이 사용된다. forMax에 Duration.Inf를 넘기면 Timer가 일시적으로 꺼진다.

[NOTE]
====
[source, scala]
----
goto(WaitForPublisher) using (newData) forMax (5 seconds) replying (WillDo) // <1>
----
<1> http://doc.akka.io/docs/akka/snapshot/scala/fsm.html[Scala FSM]에 보면 replying 이라는 modifier도 있는데 뭔말인지 모르겠다.
====

===== 타이머로 메시지 보내기

API가 세개 준비돼 있다:

[source, scala]
----
setTimer(name: String, msg: Any, timeout: FiniteDuration,
    repeat: Boolean) // <1>

cancelTimer(name: String) // <2>

isTimerActive(name: String): Boolean //< 3>
----
<1> name의 타이머를 만든다. timeout 시간 후에 msg가 fire된다. repeat 가능.
<2> name의 타이머를 즉시 cancel한다. 이미 fired되서 msg까 enqueued됐으면 msg까지 cancel한다.
<3> 타이머가 Active라는 것은 아직 msg를 fire하지 않았거나 repeat이 true인 것을 의미한다.

==== 11.2.4 Termination of FSM

FSM이 Terminated될 때 호출된다:

[source, scala]
----
onTermination {
    case StopEvent(FSM.Normal, state, data) => // <1>
    case StopEvent(FSM.Shutdown, state, data)  => // <2>
    case StopEvent(FSM.Failure(cause), state, data)  => // <3>
}
----
<1> Normal Termination
<2> ActorSystem이 shutdown될 때.
<3> Actor Failure시.

.AKKA FSM 정리
[NOTE]
====
* Complete toolkit
* Action과 State Transition 사이의 clean separation
* Timer가 있어서 Idle statue와 Failure에 대처할 수 있다.
* FSM 모델부터 구현까지 점진적인 개발.
====

=== 11.3 Implement Shared state using agents

Agent로 멀티 쓰레드에서 State를 공유하기; Agent가 State를 감싼다.

==== 11.3.1 Simple Shared state with agents

[source, scala]
----
case class BookStatistics(val nameBook: String, nrSold: Int) // <1>
case class StateBookStatistics(val sequence: Long, books: Map[String, BookStatistics]) // <2>
----
<1> 책 판매 누계
<2> 책 이름을 키로 하는 맵

image::img/figure-11-7.png[]

* Action은 Agent 안에서 한 번에 하나씩 실행된다.
* Agent의 Excution Context에서 실행된다.
* State 객체는 Thread 사이에서 공유하므로 **immutable**이어야 한다.

[source, scala]
----
import concurrent.ExecutionContext.Implicits.global // <1>
import akka.agent.Agent

val stateAgent = Agent(new StateBookStatistics(0, Map())) // <2>

val currentBookStatics = stateAgent() // <3>
val currentBookStatics = stateAgent.get()

val newState = StateBookStatics(1, Map(book -> bookStat)) // <4>
stateAgent send newState

def addBooksSold(book: String, nrSold: Int) { // <5>
    stateAgent send (oldState => {
        val bookStat = oldState.books.get(book) match {
        case Some(bookState) =>
            bookState.copy(nrSold = bookState.nrSold + nrSold)
        case None => new BookStatistics(book, nrSold)
        }
        oldState.copy(oldState.sequence + 1, // <6>
            oldState.books + (book -> bookStat))
    })
}
----
<1> implicit ExecutionContext를 설정한다. 이게 디폴트
<2> 초기 State로 Agent를 만든다.
<3> Sync로 현재 State를 가져온다.
<4> Agent를 통해서 State를 Update한다.
<5> 이전 상태를 이용해서 현재 상태를 업데이트할 때는 function을 넘겨서 update한다.
<6> sequence는 아마 추후 검증하기 위해서 겠지.

==== 11.3.2 Waiting for the state update

[source, scala]
----
val future = stateAgent alter (oldState => { // <1>
    val bookStat = oldState.books.get(book) match {
        case Some(bookState) =>
            bookState.copy(nrSold = bookState.nrSold + nrSold)
        case None => new BookStatistics(book, nrSold)
    }

    oldState.copy(oldState.sequence + 1,
        oldState.books + (book -> bookStat))
})

Await.result(future, 1 second) // <2>
----
<1> ask처럼 future를 반환하는 alter가 있다. 그래서 State가 적용된 것을 알 수 있다.
<2> 끝날 때까지 대기(최대 1초).

**'persistent'** construction:

[source, scala]
----
val agent1 = Agent(3)

val agent2 = agent1 map (_ + 1) // <1>
----
<1> 원 Agent에서 다른 Agent를 만들 수 있다. 원 Agent는 그대로다.
