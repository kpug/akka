= 3 Test-driven development with Actors

:numbered!:

== 3.1 Testing Actors

fire-and-forget style (one-way)과 request-response style (two-way)을 테스트하는 방법을 살펴본다.

Testing Actors는 일반 테스트보다 몇 가지 이유로 어렵다:

* Timing: 메시지를 비동기로 보낸다. 언제 올지 모르니 기대 값을 Assert하기 어렵다.
* Asynchronicity: Actor는 여러 쓰레드에서 병렬로 실행한다. Multi-Thread는 lock, latch, barrier도 사용하는 문제를 해결해야 한다. barrier를 잘못 쓰면 unit test가 블럭되고 결국 test suite가 halt된다.
* Statelessness: Actor의 내부 State는 접근할 수 없다. 하지만 Test할 때는 State를 검사하고 싶을 거다.
* Collaboration/Integration: Actor들의 Integration Test를 할 때는 Actor 사이에서 메시지가 잘 갔는지 확인해야 한다.

이런 일을 해야 하는데 akka-testkit 모듈이 있어서 괜찮다:

* Single threaded unit testing: Actor 인스턴트에는 바로 접근할 수 없다. 하지만 이 Test Kit이 제공하는 TestActorRef으로 접근할 수 있다. Actor에 정의한 메소드를 직접 호출할 수 있다. Single Thread로 receive 함수를 바로 호출하면 평소처럼 테스트할 수 있다.
* Multi-threaded unit testing: TestKit과 TestProve 클래스를 사용하면 Actor로부터 응답을 받거나 메시지를 Inspect하고 Timing Bound를 설정하는 것도 된다. TestKit에는 message를 Assert하는 메소드가 있다. Actor들은 Multi-Thread 환경에서 기본 Dispatcher로(system.scheduler) 실행된다.
* Multiple JVM testing: 여러 JVM에 걸쳐서 Actor를 실행시키고 테스트할 수 있는데 이건 6장에서 설명한다.

TestActorRef는 LocalActorRef를 상속하고 CallingThreadDispatcher라는 Dispatcher를 사용하도록 설정한다. 그래서 Actor를 호출하는 쓰레드가 실행하지 다른 쓰레드가 Actor를 실행하지 않는다.

테스트 할 수 있도록 Actor System을 만들어 주고 테스트가 끝나면 자동으로 멈추는 Trait:

[source, scala]
----
import org.scalatest.{ Suite, BeforeAndAfterAll }
import akka.testkit.TestKit

trait StopSystemAfterAll extends BeforeAndAfterAll { // <1>
  this: TestKit with Suite => // <2>
  override protected def afterAll() { // <3>
    super.afterAll()
    system.shutdown()
  }
}
----
<1> BeforeAndAfterAll Trait을 확장.
<2> TestKit의 멤버에 접근할 수 있도록 해준다. TestKit을 확장하는 Test에서 이 Trait을 mixin하면 된다.
<3> 테스트가 전부 끝나면 System을 종료.

== 3.2 One-way messages

fire-and-forget style에서는 메시지가 잘 전달 됐는지 확인할 방법이 없다. TestActorRef를 쓰면 할 수 있는데 세가지 형태로 나눌 수 있다:

* SilentActor: Actor가 메시지를 예외 없이 잘 처리했는지 확인하고 싶을 때 사용한다. Actor가 메시지를 처리하고 그 상태를 확인할 수 있다.
* SendingActor: 메시지를 보내고 응답을 받아서 응답을 inspect한다.
* SideEffectingActor: 메시지를 받아서 어떤 외부 객체를 사용하는 Actor가 있다고 하자. 이 Actor에 메시지를 보내고 외부 객체가 변경된 것이 있는 지 확인한다.

=== 3.2.1 SilentActor examples

Red-Green-Refactor style로 테스트를 하나씩 완성해나가는 방식으로 설명한다.

[NOTE]
.Red-Green-Refactor style
====
Red-Green-Refactor style, where you first make sure the test fails (Red), then implement the code to make it pass (Green), after which you might refactor the code to make it nicer.
====

책에서는 Single Thread version도 설명하는데 정리하지 않는다. 별차이 없다.

Multi Threaded Test에서는 TestKit에 들어 있는 ActorSystem을 사용한다.

[source, scala]
----
"change internal state when it receives a message, multi" in {
    import SilentActorProtocol._

    val silentActor = system.actorOf(Props[SilentActor], "s3")
    silentActor ! SilentMessage("whisper1")
    silentActor ! SilentMessage("whisper2")
    silentActor ! GetState(testActor) // <1>
    expectMsg(Vector("whisper1", "whisper2")) // <2>
}
----
<1> testActor는 TestKit에 포함돼 있다. slientActor는 GetState 메시지를 받으면 testActor에 내부 상태를 반환한다.
<2> expectMsg는 TestKit에 포함된 툴이다. testActor가 받은 메시지를 assert한다.

[NOTE]
.expectMsg*의 Timeout
====
TestKit에는 여러가지 expectMsg 함수가 있다. expectMsg는 메시지가 오길 일정시간동안 기다린다. 그 기본 대기시간은 akka.test.single-expect-default의 값이다.

`dilation factor`라는 게 있다. 기본 값은 1이고 Dilated하지 않는 다는 것을 의미한다. 테스트를 실행하는 머신 성능에 따라 다른 대기시간을 갖도록 설정할 수 있다. 자세한 것은 7장에서 설명한다.
expectMsg에 대기시간을 넘길 수도 있지만 설정을 통해서 써라.
====

=== 3.2.1 SilentActor examples

[source, scala]
----
object SilentActorProtocol {
    case class SilentMessage(data: String)
    case class GetState(receiver: ActorRef)
}

class SilentActor extends Actor {
    import SilentActorProtocol._
    var internalState = Vector[String]() // <1>

    def receive = {
        case SilentMessage(data) =>
            internalState = internalState :+ data
        case GetState(receiver) => receiver ! internalState // <2>
    }
}
----
<1> Actor는 Multi-Thread에서 보호되기 때문에 var로 선언하고 set/update한다.
<2> GetState 메시지를 추가한다. 이걸로 Actor의 상태를 확인한다.

=== 3.2.2 SendingActor example

Lakers vs Bulls game의 티켓을 판매하는 TicketingAgent를 만든다. 이 Agent는 Ticket을 하나 팔고 다음 Agent로 나머지 티켓을 넘긴다.

[source, scala]
----
"A Sending Actor" must {
    "send a message to an actor when it has finished" in {
        import Agent01Protocol._

        val props = Props(new Agent01(testActor)) // <1>
        val sendingActor = system.actorOf(props, "Agent1")
        val tickets = Vector(Ticket(1), Ticket(2), Ticket(3))
        val game = Game("Lakers vs Bulls", tickets)

        sendingActor ! game // <2>

        expectMsgPF() { // <4>
            case Game(_, tickets) =>
                tickets.size must be(game.tickets.size - 1) // <3>
        }
    }
}
----
<1> 티켓을 받을 다음 Agent 설정.
<2> Agent에 Ticket을 넘긴다
<3> testActor가 받은 Ticket이 하나 적은지 확인.
<4> PF는 PartialFunction의 약자일듯.

Agent01:

[source, scala]
----
object Agent01Protocol {
    case class Ticket(seat: Int)
    case class Game(name: String, tickets: Seq[Ticket])
}
class Agent01(nextAgent: ActorRef) extends Actor {
    import Agent01Protocol._
    def receive = {
        case game @ Game(_, tickets) =>
            nextAgent ! game.copy(tickets = tickets.tail) // <1>
    }
}
----
<1> 티켓 하나빼고 nextAgent(testActor)로 보낸다.


.SendingActor의 몇 가지 유형
[width="80%",cols="2",options="header"]
|=========================================================
|Actor | Description
|MutatingCopyActor | 복사에서 다음 Actor로 넘기는 패턴, 여기서 보여준 Agent01이 여기에 해당
|ForwardingActor | 변경없이 메시지를 그대로 다른 Actor로 Forward
|TransformingActor | 받은 메시지를 다른 타입의 메시지로 Transform한다.
|FilteringActor | 받은 메시지 중 몇 가지는 Filtering한다(버린다)
|SequencingActor | 메시지를 하나 받으면 새로 메시지를 여러개 만들어서 보낸다.
|=========================================================

MutatingCopyActor, ForwardingActor, TransformingActor는 위에서 처럼 testActor가 메시지를 받게 해서 expectMsg로 테스트한다.

==== FilteringActor

[source, scala]
----
"filter out particular messages" in {
    import FilteringActorProtocol._

    val props = Props(new FilteringActor(testActor, 5))
    val filter = system.actorOf(props, "filter-1")

    filter ! Event(1)
    filter ! Event(2)
    filter ! Event(1)
    filter ! Event(3)
    filter ! Event(1)
    filter ! Event(4)
    filter ! Event(5)
    filter ! Event(5)
    filter ! Event(6)

    val eventIds = receiveWhile() { // <1>
        case Event(id) if id <= 5 => id
    }

    eventIds must be(List(1, 2, 3, 4, 5)) // <2>
    expectMsg(Event(6)) // <3>
}
----
<1> testActor가 받은 메시지를 collect 하는 함수. collect 함수와 동작이 같다.
<2> filterActor가 중복 Event는 걸러주기 때문에 중복되지 않음.
<3> `Event(6)`를 받았는지 검사.

[source, scala]
----
object FilteringActorProtocol {
  case class Event(id: Long)
}

class FilteringActor(nextActor: ActorRef,
                     bufferSize: Int) extends Actor { // <1>
    import FilteringActorProtocol._
    var lastMessages = Vector[Event]()

    def receive = {
        case msg: Event =>
            if (!lastMessages.contains(msg)) { // <2>
                lastMessages = lastMessages :+ msg
                nextActor ! msg // <3>
                if (lastMessages.size > bufferSize) {
                    // discard the oldest
                    lastMessages = lastMessages.tail
                }
            }
    }
}
----
<1> bufferSize를 초과하면 Oldest 메시지는 버린다.
<2> 중복 제거
<3> 중복 제거한 메시지 보내기

`SequencingActor`는 `receiveWhile`로 잘 하면 된다.

`ignoreMsg`와 `expectNoMsg`로 메시지가 없음을 검사한다:

* `ignoreMsg`: PF가 true로 리턴하는 메시지는 무시하도록 설정한다. 메시지가 많이 오갈때 집중할 수 있다. `ignoreNoMsg`로 끈다.
* `expectNoMsg`: 일정시간동안 메시지가 없으면 Fail

[source, scala]
----
"filter out particular messages using expectNoMsg" in {
    import FilteringActorProtocol._
    val props = Props(new FilteringActor(testActor, 5))
    val filter = system.actorOf(props, "filter-2")

    filter ! Event(1)
    filter ! Event(2)

    expectMsg(Event(1))
    expectMsg(Event(2))

    filter ! Event(1)

    expectNoMsg // <1>

    filter ! Event(3)

    expectMsg(Event(3))

    filter ! Event(1)

    expectNoMsg

    filter ! Event(4)
    filter ! Event(5)
    filter ! Event(5)

    expectMsg(Event(4))
    expectMsg(Event(5))

    expectNoMsg() // <2>
}
----
<1> 메시지가 없으면 test fail인데 바로 위에서 보낸 메시지가 있다.
<2> `Event(5)`가 하나 쌓여 있기 때문에 에러가 안나는 것 같음:)

==== TestProve

TestKit은 testActor가 하나일 때 사용한다. testActor가 여러개 필요할 때는 TestProve를 사용해야 한다.

=== 3.2.3 SideEffectingActor example

[source, scala]
----
import Greeter01Test._
class Greeter01Test extends TestKit(testSystem) // <2>
        with WordSpecLike
        with StopSystemAfterAll {
    "The Greeter" must {
        "say Hello World! when a Greeting("World") is sent to it" in {
            val dispatcherId = CallingThreadDispatcher.Id
            val props = Props[Greeter].withDispatcher(dispatcherId) // <3>
            val greeter = system.actorOf(props)

            EventFilter.info(message = "Hello World!", // <4>
                    occurrences = 1).intercept {
                greeter ! Greeting("World")
            }
        }
    }
}

object Greeter01Test {
    val testSystem = { // <1>
        val config = ConfigFactory.parseString(
        """
            akka.loggers = [akka.testkit.TestEventListener]
        """)
        ActorSystem("testsystem", config)
    }
}

----
<1> testSystem 정의. `akka.loggers`를 설정하는 부분은 잘 모르겠다. TestEventListener를 이렇게 설정하면 ActorLogging trait으로 남기는 로그를 처리할 수 있다.
<2> testSystem을 서용하도록
<3> Single Thread로 동작하도록 Dispacher를 설정한다. greeter가 `Greeting("World")` 메시지를 받으면 TestEventListener로 Log를 잘 남기는지 확인하려면 Single Thread가 필요하다. 아마도 TestEventListener가 Sate하지 않거나 할 것 같다.
<4> intercept함수에 넘긴 code block이 실행할 때 적용된다. greeter가 `Greeting("World")`라는 메시지를 받고 "Hello World!"라고 로그에 한번 남겨야 테스트가 성공한다. 로그가 없거나 두번이면 에러가 발생한다.

이렇게 테스트하는 게 좀 복잡해보여도 편리할 때가 많다. Lisnter를 넘겨받는 테스트도 살펴보자:

[source, scala]
----
class Greeter02(listener: Option[ActorRef] = None)
        extends Actor with ActorLogging {
    def receive = {
        case Greeting(who) =>
            val message = "Hello " + who + "!"
            log.info(message)
            listener.foreach(_ ! message) // <1>
    }
}
----
<1> listener 한테 직접 메시지를 보낸다.

[source, scala]
----
class Greeter02Test extends TestKit(ActorSystem("testsystem"))
        with WordSpecLike
        with StopSystemAfterAll {
    "The Greeter" must {

        // <1>
        "say Hello World! when a Greeting("World") is sent to it" in {
            val props = Props(new Greeter02(Some(testActor)))
            val greeter = system.actorOf(props, "greeter02-1")
            greeter ! Greeting("World")
            expectMsg("Hello World!")
        }

        // <2>
        "say something else and see what happens" in {
            val props = Props(new Greeter02(Some(testActor)))
            val greeter = system.actorOf(props, "greeter02-2")
            system.eventStream.subscribe(testActor, classOf[UnhandledMessage])
            greeter ! "World"
            expectMsg(UnhandledMessage("World", system.deadLetters, greeter))
        }
    }
}
----
<1> 위에서 했던 방식.
<2> `Greeter02`가 처리하지 못하는 메시지를 보내고 처리하지 못했는지 확인.

=== 3.3 Two-way messages

받은 메시지를 그대로 sender에게 돌려주는 EchoActor가 있다고 할 때 아래처럼 테스트를 작성한다:

[source, scala]
----
"Reply with the same message it receives without ask" in {
    val echo = system.actorOf(Props[EchoActor], "echo2")
    echo ! "some message"
    expectMsg("some message")
}

class EchoActor extends Actor {
    def receive = {
        case msg =>
        sender() ! msg
    }
}
----

`EchoActor`는 바로 응답을 주는 Actor이고 이런게 Two-way messages이다. 이 유형에 대해서 책에는 설명이 별로 없다. 그냥 위에 소개한 방법을 잘 활용하라는 것 같다.

== Source Code

https://github.com/RayRoestenburg/akka-in-action/tree/master/chapter-testdriven/src/test/scala/aia/testdriven[Source Code]
