== 14. Actor persistence

:numbered!:

In this chapter:

* Event sourcing
* Persistent actors
* Clustered persistence

* Actor가 stop하거나 restart하면 메모리에 있는 state를 잃는다. akka-persistence를 쓰면 쉽게(응?) 해결할 수 있다.
* event sourcing이라는 걸 구현한거다.
* immutable event를 순서대로 journal에 저장하는 거다.
* Cluster Singleton: Actor를 Cluster에서 Singleton으로 띄우는 모듈
* Cluster Sharding: state가 너무 커서 메모리 하나에 저장하기 어려울 때 사용하는 모듈

[NOTE]
.왜 actor의 state를 recover해야 하나?
====
* shopping basket actor
* State를 가지면서 메시지를 중계하는 시스템
** 결제 시스템
** 물류 시스템

등등에 필요하다.
====

=== 14.1 Recovering state with event sourcing

Event Souring은 immutable event를 순서대로 journal에 저장했다가 문제가 생기면 recover하는 방법임.

먼저 CRUD 스타일로 DB에 저장하는 방법을 살펴본다.

==== 14.1.1 Updating records in place

image::img/figure-14-1.png[]

* 최종 결과만 저장 했다.
* 어떤 과정을 거쳤는지 알 수 없다.

==== 14.1.2 Persisting state without updates

image::img/figure-14-3.png[]

* 성공한 Operation을 전부 저장했다.

image::img/figure-14-4.png[]

* event를 읽고 계산해서 결과를 알 수 있다.

이렇게 CRUD 스타일로도 Event Sourcing을 할 수 있지만 계산기처럼 간단한 경우에만 쓸 수 있다. PersistentActor로 구현하면 복잡한 것도 간단하게 할 수 있다.

==== 14.1.3 Event sourcing for actors

* Event Sourcing은 writing과 reading으로 구분해서 생각 할 수 있다.
** reading: journal에서 event를 읽어서 actor의 상태를 복원한다.
** Writing: journal에 event를 쓴다.
* journal interface를 구현해서 journal plugin을 만들 수 있다.
** TCK(Technology Compatibility Kt)도 있다(TCK는 JSR 구현체의 JSR 호환성을 테스트하는 도구라는데 뭔말이래 이거.)
** SQL DB, NoSQL DB, embedded DB, file system 등의 journal plugin이 구현돼 있다.
*** http://akka.io/community/ 에서 이용가능하다.
* Event Sourcing에는 큰 저장공간이 필요하다.
** 중간 중간에 snapshots을 저장해서 필요한 저장 공간을 줄일 수 있다.
*** Recover시 마지막 snapshots과 그 이후의 snapshot만 recover된다.
* Actor State가 너무 커서 Node하나에 담을 수 없으면 Cluster Sharding을 이용하면 된다.
* Serialization: 기본 적으로 Java Serialization을 따르지만 Serializer를 구현해 사용 할 수 있다.

.Experimental
[NOTE]
====
akka persistece는 experimental이라 api가 변경될 수 있다. 기능 구현에 초점을 두었기 때문에 production에서 사용할만 하지만 api는 변경될 수 있다.

그리고 querying event data도 지원할 예정이다. 현재 PersistentView Trait을 쓰면 persisted events를 읽어서 alternative state를 만들수 있지만 One PersistentActor의 Event만 읽을 수 있다.
====

=== 14.2 Persistent actors

.Listing 14.1 Akka-persistence dependency
[source, scala]
----
parallelExecution in Test := false // <1>

fork := true // <2>

libraryDependencies ++= {
    val akkaVersion = "2.3.12"
    Seq(
        "com.typesafe.akka" %% "akka-actor" % akkaVersion,
        "com.typesafe.akka" %% "akka-persistence-experimental" % akkaVersion, // <3>
        // other dependencies for the rest of this chapter
    )
}
----
<1> file-based journal을 사용할 때는 parallelExecution을 꺼야 한다.
<2> LevelDB native Module을 사용하려면 fork를 켜야 한다.
<3> akka-persistence-experimental

* file-based key/value store인 LevelDB가 akka persitence에 내장돼 있다.
** local plugin: ActorSystem 하나로 테스트하는 경우에 사용한다.
** shared plugin: 여러 ActorSystem에서 테스트하는 경우에 사용한다.
* LevelDB의 Java Port도 있다.

.Java Port를 사용하련 아래처럼 설정해야 한다.
[source, scala]
----
akka.persistence.journal.leveldb.native = off // <1>
akka.persistence.journal.leveldb-shared.store.native = off // <2>
----
<1> local plugin
<2> shared plugin

==== 14.2.1 Persistent actor

* PersistentActor는 두가지 모드로 동작한다.
** events를 recover
** Commands를 process

[source, scala]
----
sealed trait Command // <1>
case object Clear extends Command
case class Add(value: Double) extends Command
case class Subtract(value: Double) extends Command
case class Divide(value: Double) extends Command
case class Multiply(value: Double) extends Command
case object PrintResult extends Command
case object GetResult extends Command

sealed trait Event // <2>
case object Reset extends Event
case class Added(value: Double) extends Event
case class Subtracted(value: Double) extends Event
case class Divided(value: Double) extends Event
case class Multiplied(value: Double) extends Event

case class CalculationResult(result: Double = 0) { // <3>
    def reset = copy(result = 0)
    def add(value: Double) = copy(result = this.result + value)
    def subtract(value: Double) = copy(result = this.result - value)
    def divide(value: Double) = copy(result = this.result / value)
    def multiply(value: Double) = copy(result = this.result * value)
}
----
<1> Calculator Actor가 처리할 Command
<2> 저장할 Event
<3> Calculator state

.Calculator Actor
[source, scala]
----
class Calculator extends PersistentActor with ActorLogging {
  import Calculator._

  def persistenceId = Calculator.name // <1>

  var state = CalculationResult() // <2>

  val receiveCommand: Receive = { // <3>
    case Add(value)      => persist(Added(value))(updateState) // <4>
    case Subtract(value) => persist(Subtracted(value))(updateState)
    case Divide(value)   => if(value != 0) persist(Divided(value))(updateState)
    case Multiply(value) => persist(Multiplied(value))(updateState)
    case PrintResult     => println(s"the result is: ${state.result}")
    case GetResult     => sender() ! state.result // <5>
    case Clear => persist(Reset)(updateState)
  }

  val updateState: Event => Unit = { // <6>
    case Reset => state = state.reset
    case Added(value) => state = state.add(value)
    case Subtracted(value) => state = state.subtract(value)
    case Divided(value) => state = state.divide(value)
    case Multiplied(value) => state = state.multiply(value)
  }

  val receiveRecover: Receive = { // <7>
    case event: Event => updateState(event)
    case RecoveryCompleted => log.info("Calculator recovery completed") // <8>
  }
}
----
<1> journal에서 Actor를 식별하는데 사용한다.
<2> Calculator 상태, immutable State다.
<3> Command를 받으면 receiveCommand가 호출된다.
<4> Event를 persist되면 handler(updateState)가 호출된다.
<5> Command를 하나씩 순서대로 처리하기 때문에 sender()에게 보내지는 result는 안전하다.
<6> Event에 따라서 State를 변경한다.
<7> Actor가 start되거나 restart되면 호출된다.
<8> Recovery가 끝나면 RecoveryCompleted 메시지를 받는다.

네줄요약:

* Command는 valid한지 검사하고 Event로 변환한다.
* valid한 Command는 Event로 변환하고 Event가 state를 변경시킨다. recovery시 동일한 Logic으로 Recovery된다.
* logic은 updateState 함수에 구현한다. receiveCommand와 receiveRecover에 또 logic을 구현하지 않는다.
* CalculationResult에 immutable한 방식으로 계산하는 로직을 구현한다. 그래서 updateState는 단순하다.

==== 14.2.2 Testing

akka-persistence를 위한 testkit은 제공하지 않는다. 그래서 책은 PersistenceSpec과 PersistenceCleanup을 직접 Testkit을 만든다.

.PersistenceSpec, PersistenceCleanup
[source, scala]
----
import java.io.File
import com.typesafe.config._
import scala.util._
import akka.actor._
import akka.persistence._
import org.scalatest._
import org.apache.commons.io.FileUtils

abstract class PersistenceSpec(system: ActorSystem) extends TestKit(system)
        with ImplicitSender
        with WordSpecLike
        with Matchers
        with BeforeAndAfterAll
        with PersistenceCleanup {

    def this(name: String, config: Config) = this(ActorSystem(name, config))

    override protected def beforeAll() = deleteStorageLocations() // <1>

    override protected def afterAll() = { // <2>
        deleteStorageLocations()
        TestKit.shutdownActorSystem(system)
    }

    def killActors(actors: ActorRef*) = { // <3>
        actors.foreach { actor =>
            watch(actor)
            system.stop(actor)
            expectTerminated(actor)
        }
    }
}

trait PersistenceCleanup {
    def system: ActorSystem

    val storageLocations = List( // <4>
                "akka.persistence.journal.leveldb.dir",
                "akka.persistence.journal.leveldb-shared.store.dir",
                "akka.persistence.snapshot-store.local.dir").map { s =>
            new File(system.settings.config.getString(s))
        }

    def deleteStorageLocations(): Unit = { // <5>
        storageLocations.foreach(dir => Try(FileUtils.deleteDirectory(dir)))
    }
}
----
<1> Test를 실행하기 전에 기존 journal 삭제
<2> Test가 끝나도 journal 삭제.
<3> actor에 stop시키고 실제로 다 죽을 때까지 대기(watch, stop, on terminated)
<4> 파일을 생성.
<5> 파일을 삭제

.Test
[source, scala]
----
package aia.persistence.calculator
import akka.actor._
import akka.testkit._
import org.scalatest._

class CalculatorSpec extends PersistenceSpec(ActorSystem("test"))
        with PersistenceCleanup {

    "The Calculator" should {
        "recover last known result after crash" in {
            val calc = system.actorOf(Calculator.props, Calculator.name)
            calc ! Calculator.Add(1d)
            calc ! Calculator.GetResult
            expectMsg(1d)

            calc ! Calculator.Subtract(0.5d)
            calc ! Calculator.GetResult
            expectMsg(0.5d)

            killActors(calc)

            val calcResurrected = system.actorOf(Calculator.props, Calculator.name)
            calcResurrected ! Calculator.GetResult
            expectMsg(0.5d)

            calcResurrected ! Calculator.Add(1d)
            calcResurrected ! Calculator.GetResult
            expectMsg(1.5d)
        }
    }
}
----

==== 14.2.3 Snapshots

`akka.persistence.snapshot-store.local.dir`에 저장된다.

Snapshots을 저장하는 shopping basket actor 예제를 살펴본다.

.Basket commands and events
[source, scala]
----

object Shopper {
    ...
    trait Command {
      def shopperId: Long // <1>
    }

    ...
}

sealed trait Command extends Shopper.Command // <2>
case class Add(item: Item, shopperId: Long) extends Command
case class RemoveItem(productId: String, shopperId: Long) extends Command
case class UpdateItem(productId: String, number: Int, shopperId: Long) extends Command
case class Clear(shopperId: Long) extends Command // <3>
case class Replace(items: Items, shopperId: Long) extends Command
case class GetItems(shopperId: Long) extends Command
case class CountRecoveredEvents(shopperId: Long) extends Command
case class RecoveredEventsCount(count: Long)

sealed trait Event extends Serializable
case class Added(item: Item) extends Event
case class ItemRemoved(productId: String) extends Event
case class ItemUpdated(productId: String, number: Int) extends Event
case class Replaced(items: Items) extends Event
case class Cleared(clearedItems: Items) extends Event // <4>
case class Snapshot(items: Items)
----
<1> Shopper.Command는 shopperId를 가지는 trait.
<2> 모든 Command는 shopperId를 가진다.
<3> 돈이 지불되면 Basket을 clear한다.
<4> Basket이 Cleared되면 Snapshot을 남긴다.

.Item Items
[source, scala]
----
case class Items(list: List[Item]) {...} // <1>
case class Item(productId:String, number: Int, unitPrice: BigDecimal) {...} // <2>
----
<1> CalculationResult처럼 add, remove, clear등의 메소드를 구현한다. immutable copy를 반환한다.
<2> <1>이랑 같음.

[source, scala]
----
private val updateState: (Event => Unit) = {
    case Added(item) => items = items.add(item)
    case ItemRemoved(id) => items = items.removeItem(id)
    case ItemUpdated(id, number) => items = items.updateItem(id, number)
    case Replaced(newItems) => items = newItems
    case Cleared(clearedItems) => items = items.clear
}

def receiveCommand = {
    case Add(item, _) =>
        persist(Added(item))(updateState)
    case RemoveItem(id, _) =>
        if(items.containsProduct(id)) {
            persist(ItemRemoved(id)){ removed =>
                updateState(removed)
                sender() ! Some(removed)
            }
        } else {
            sender() ! None
        }
    case UpdateItem(id, number, _) =>
        if(items.containsProduct(id)) {
            persist(ItemUpdated(id, number)){ updated =>
                updateState(updated)
                sender() ! Some(updated)
            }
        } else {
            sender() ! None
        }
    case Replace(items, _) =>
        persist(Replaced(items))(updateState)
    case Clear(_) =>
        persist(Cleared(items)){ e =>
            updateState(e)
            //basket is cleared after payment.
            saveSnapshot(Basket.Snapshot(items)) // <1>
        }
    case GetItems(_) =>
        sender() ! items
    case CountRecoveredEvents(_) =>
        sender() ! RecoveredEventsCount(nrEventsRecovered)
    case SaveSnapshotSuccess(metadata) => // <2>
        log.info(s"Snapshot saved with metadata $metadata")
    case SaveSnapshotFailure(metadata, reason) => // <3>
        log.error(s"Failed to save snapshot: $metadata, $reason.")
}
----
<1> Snapshot저장
<2> Snapshot이 저장되면 이 메시지를 받는다.
<3> Snapshot을 저장못하면 이메시지를 받는다.

[source, scala]
----
def receiveRecover = {
    case event: Event =>
        nrEventsRecovered = nrEventsRecovered + 1
        updateState(event)
    case SnapshotOffer(_, snapshot: Basket.Snapshot) => // <1>
        log.info(s"Recovering baskets from snapshot: $snapshot for $persistenceId")
        items = snapshot.items
}
----
<1> Recovery시 Snapshot을 이용한다.

.Recovery customizaion
[NOTE]
====
* 기본적으로 Latest snapshot부터 recover한다.
v* sequenceNr나 timestamp를 이용해서 snapshot을 선택할 수 있다.
** Recovery를 리턴하는 `recovery` 메소드를 override해서 한다.
** 2.3.12버전에서는 preStart를 override하는 방법을 사용해야 한다.
====

[source, scala]
----
val shopperId = 2L
val macbookPro = Item("Apple Macbook Pro", 1, BigDecimal(2499.99))
val macPro = Item("Apple Mac Pro", 1, BigDecimal(10499.99))
val displays = Item("4K Display", 3, BigDecimal(2499.99))
val appleMouse = Item("Apple Mouse", 1, BigDecimal(99.99))
val appleKeyboard = Item("Apple Keyboard", 1, BigDecimal(79.99))
val dWave = Item("D-Wave One", 1, BigDecimal(14999999.99))

"The basket" should {
    "skip basket events that occured before Cleared during recovery" in {
        val basket = system.actorOf(Basket.props, Basket.name(shopperId))
        basket ! Basket.Add(macbookPro, shopperId)
        basket ! Basket.Add(displays, shopperId)
        basket ! Basket.GetItems(shopperId)
        expectMsg(Items(macbookPro, displays))

        basket ! Basket.Clear(shopperId) // <1>

        basket ! Basket.Add(macPro, shopperId)
        basket ! Basket.RemoveItem(macPro.productId, shopperId)
        expectMsg(Some(Basket.ItemRemoved(macPro.productId)))

        basket ! Basket.Clear(shopperId) // <1>
        basket ! Basket.Add(dWave, shopperId)
        basket ! Basket.Add(displays, shopperId)

        basket ! Basket.GetItems(shopperId)
        expectMsg(Items(dWave, displays))

        killActors(basket)

        val basketResurrected = system.actorOf(Basket.props,
                Basket.name(shopperId))
        basketResurrected ! Basket.GetItems(shopperId)
        expectMsg(Items(dWave, displays))

        basketResurrected ! Basket.CountRecoveredEvents(shopperId)

        expectMsg(Basket.RecoveredEventsCount(2)) // <2>

        killActors(basketResurrected)
    }
}
----
<1> Basket을 Clear하면 Snapshot이 생성된다.
<2> Recovery시 count한 수.

==== 14.2.4 Serialization

* Default로 Java Serialization을 사용하지만 Akka serialization infrastructure를 통해서 튜닝가능.

.Seriously, write a custom serializer?
[NOTE]
====
아래와 같은 상황에서 필요하다:

* 더 빠른 Serialization이 필요할 때
* Custom logic이 필요할 때
* serialized data를 Migration하고 싶을 때.

* akka-remote에 Google Protocol Buffers format용 Serializer가 있다. protobuf가 생성한 Class를 Event로 바로 사용할 수있다.
* akka-serialization(akka-kyro-serialization) 라이브러리를 사용 할 수 있다.
** kryo 포멧으로 저장한다.
* https://github.com/scalapenos/stamina[Stamina]는 특별히 akka-persistence용으로 만들었다.
** spray-json을 이용해서 JSON Serialization도 가능하다.
** versioning도 지원해서 upcasting도 가능하다.
====

.Serialization Configuration
[source, scala]
----
akka {
    actor {
        serializers {
            basket = "aia.persistence.BasketEventSerializer" // <1>
            basketSnapshot = "aia.persistence.BasketSnapshotSerializer" // <1>
        }

        serialization-bindings { // <2>
            "aia.persistence.Basket$Snapshot" = basketSnapshot
        }
    }
}
----
<1> Serializer 등록
<2> Bind Class and Serializer. 여기 등록하지 않은 클래스는 default Serializer를 사용한다.

===== Serializer 직접 구현하기.

.Akka Serializer trait
[source, scala]
----
trait Serializer {
    /**
    * Completely unique value to identify this
    * implementation of Serializer,
    * used to optimize network traffic
    * Values from 0 to 16 is reserved for Akka internal usage
    */
    def identifier: Int // <1>

    /**
    * Serializes the given object into an Array of Byte
    */
    def toBinary(o: AnyRef): Array[Byte] // <2>

    /**
    * Returns whether this serializer needs a manifest
    * in the fromBinary method
    */
    def includeManifest: Boolean // <3>

    /**
    * Produces an object from an array of bytes,
    * with an optional type-hint;
    * the class should be loaded using ActorSystem.dynamicAccess.
    */
    def fromBinary(bytes: Array[Byte], manifest: Option[Class[_]]): AnyRef // <4>
}
----
<1> Type을 식별하는 serialized class 이름이나 숫자. __어떤 의미인지 모르겠음__
<2> Serialize 메소드.
<3> Deserialize 시 manifest 파일이 필요할 때? __어떤 의미인지 모르겠음__
<4> Deserialize 메소드.

.spray-json을 사용하는 BasketEventSerializer
[source, scala]
----
import scala.util.Try
import akka.serialization._
import spray.json._

class BasketEventSerializer extends Serializer {
    import JsonFormats._

    val includeManifest: Boolean = false // <1>
    val identifier = 123678213 // <2>

    def toBinary(obj: AnyRef): Array[Byte] = {
        obj match {
            case e: Basket.Event => // <3>
                BasketEventFormat.write(e).compactPrint.getBytes
            case msg =>
                throw new Exception(s"Cannot serialize $msg with ${this.getClass}")
        }
    }

    def fromBinary(bytes: Array[Byte], clazz: Option[Class[_]]): AnyRef = {
        val jsonAst = new String(bytes).parseJson // <4>
        BasketEventFormat.read(jsonAst) // <5>
    }
}
----
<1> fromBinary에서 manifest파일 안씀.
<2> 아놔 아무거나 넣다니. 실제로 뭘넣는지가 궁금하다!
<3> Event를 Json으로 변환.
<4> json을 json AST로 파싱.
<5> json object를 Event로 변환. BasketEventFormat 소스는 생략.

[source, scala]
----
class BasketSnapshotSerializer extends Serializer {
    import JsonFormats._

    val includeManifest: Boolean = false
    val identifier = 1242134234

    def toBinary(obj: AnyRef): Array[Byte] = {
        obj match {
            case snap: Basket.Snapshot => snap.toJson.compactPrint.getBytes
            case msg => throw new Exception(s"Cannot serialize $msg")
        }
    }

    def fromBinary(bytes: Array[Byte], clazz: Option[Class[_]]): AnyRef = {
        val jsonStr = new String(bytes)
        jsonStr.parseJson.convertTo[Basket.Snapshot] // <1>
    }
}
----
<1> spray-json을 공부해야 할 듯.ㅎㅎ

.Event Adapter
[NOTE]
====
akka-persistence는 byte array를 Journal이나 SnapshotStore에 저장할 때 그대로 저장하지 않고 내부 포멧으로 감싸서 저장한다. 그래서 backend db에 직접 query하거나 맘대로 꺼내 볼 수 없다.

Akka 2.4부터는 EventAdapter라는 것이 생겨서 임의의 포멧으로 저장할 수 있다.
====

=== 14.3 Clustered persistence

* LevelDB같은 file-based journal은 Cluster 환경에서 사용하기 부적합하다. Apache Cassandra 같은 distributed database가 적합하다.
* 먼저 Local Shopper를 만들자.

image::img/figure-14-5.png[]

.ShopperService 예제
[source, scala]
----
trait ShoppersRoutes extends HttpService
        with ShopperMarshalling {

    def routes =
        deleteItem ~
        updateItem ~
        getBasket ~
        updateBasket ~
        deleteBasket ~
        pay

    def shoppers: ActorRef

    implicit def timeout: Timeout
    implicit def executionContext: ExecutionContext

    def pay = {
        post {
            pathPrefix("shopper" / ShopperIdSegment / "pay") { shopperId =>
                shoppers ! Shopper.PayBasket(shopperId)
                complete(OK)
            }
        }
    }

    ...
}
----


[source, scala]
----
package aia.persistence

import akka.actor._

object LocalShoppers {
    def props = Props(new LocalShoppers)
    def name = "local-shoppers"
}

class LocalShoppers extends Actor with ShopperLookup {
    def receive = forwardToShopper // <1>
}

trait ShopperLookup {
    implicit def context: ActorContext

    def forwardToShopper: Actor.Receive = {
        case cmd: Shopper.Command =>
            context.child(Shopper.name(cmd.shopperId)) // <2>
                .fold(createAndForward(cmd, cmd.shopperId))(forwardCommand(cmd))
    }

    def forwardCommand(cmd: Shopper.Command)(shopper: ActorRef) =
        shopper forward cmd

    def createAndForward(cmd: Shopper.Command, shopperId: Long) =
        createShopper(shopperId) forward cmd

    def createShopper(shopperId: Long) =
        context.actorOf(Shopper.props(shopperId), Shopper.name(shopperId))
}
----
<1> Persistent Actor이기 때문에 forwardToShopper를 receive에 할당한다.
<2> shopperId로 해당 Shopper를 찾아서 없으면 createAndForward(만들어서 Forward)하고 있으면 찾은 Shopper에 forward한다.

[source, scala]
----
import akka.actor._

object Shopper {
    def props(shopperId: Long) = Props(new Shopper)
    def name(shopperId: Long) = shopperId.toString // <1>

    trait Command {
        def shopperId: Long // <2>
    }

    case class PayBasket(shopperId: Long) extends Command

    val cash = 40000
}

class Shopper extends Actor {
    import Shopper._

    def shopperId = self.path.name.toLong

    val basket = context.actorOf(Basket.props, Basket.name(shopperId))

    val wallet = context.actorOf(Wallet.props(shopperId, cash),
            Wallet.name(shopperId))

    def receive = {
        case cmd: Basket.Command => basket forward cmd
        case cmd: Wallet.Command => wallet forward cmd

        // <3>
        case PayBasket(shopperId) => basket ! Basket.GetItems(shopperId)
        case Items(list) => wallet ! Wallet.Pay(list, shopperId)
        case Wallet.Paid(_, shopperId) => basket ! Basket.Clear(shopperId)
    }
}
----
<1> 사용자 식별자인 shopperId를 이름으로 Shopper를 만든다.
<2> Shopper Actor에게 Command를 보내는 것이기 때문에 Command는 shopperId가 필요하다.
<3> PayBasket 요청되면 결제를 하고 Basket을 비운다.

==== 14.3.1 Cluster singleton

Cluster Singleton과 Cluster Sharding은 akka-contrib 모듈에 있다.

image::img/figure-14-6.png[]

* ShopperSingleton은 Cluster의 모든 노드에 노드에 만들고 이 ShopperSingleton을 통해서 Shoppers에 접근한다.
* Shoppers가 Cluster Singleton으로 Cluster 내에서 하나만 만들어진다.

[source, scala]
----
import akka.actor._
import akka.persistence._
import akka.contrib.pattern.ClusterSingletonManager
import akka.contrib.pattern.ClusterSingletonProxy

object ShoppersSingleton {
    def props = Props(new ShoppersSingleton)
    def name = "shoppers-singleton"
}

class ShoppersSingleton extends Actor {
    val singletonManager = context.system.actorOf(
        ClusterSingletonManager.props(
            singletonProps = Shoppers.props, // <1>
            singletonName = Shoppers.name, // <2>
            termination-Message= PoisonPill, // <3>
            role = None // <4>
        ), name = Shoppers.name)

    val shoppers = context.system.actorOf(
        ClusterSingletonProxy.props( <5>
            singletonPath = singletonManager.path
                .child(Shoppers.name)
                .toStringWithoutAddress, // <6>
            role = None
        ), name = "shoppers-proxy")

    def receive = {
        case command: Shopper.Command => shoppers forward command
    }
}
----
<1> Singleton으로 만들 Actor의 props
<2> Signleton으로 만들 Actor의 name
<3> TerminationMessage는 PoisonPill
<4> 이 예제에서는 특별한 Role이 없으니까 None으로.
<5> ClusterSingnetonProxy를 통해서 Shoppers Actor를 생성한다.
<6> signletonPath를 넘겨준다.

[source, scala]
----
object Shoppers {
    def props = Props(new Shoppers)
    def name = "shoppers"

    sealed trait Event
    case class ShopperCreated(shopperId: Long)
}

class Shoppers extends PersistentActor
        with ShopperLookup { // <1>
    import Shoppers._

    def persistenceId = "shoppers"
    def receiveCommand = forwardToShopper

    override def createAndForward(cmd: Shopper.Command, shopperId: Long) = {
        val shopper = createShopper(shopperId)
        persistAsync(ShopperCreated(shopperId)) { _ => // <2>
            forwardCommand(cmd)(shopper)
        }
    }

    def receiveRecover = {
        case ShopperCreated(shopperId) =>
            context.child(Shopper.name(shopperId))
                .getOrElse(createShopper(shopperId))
    }
}
----
<1> Shoppers로 구현했었기 때문에 mixin으로 간단히 기능 구현.
<2> Command의 순서가 중요하지 않기 때문에 성능이 좋은 persistAsync를 사용한다.
<3> child Actor에서 shopperId를 찾아서 없으면 Shopper를 만든다. 그러니까 Shopper Actor도 State라고 볼 수 있다.

==== 14.3.2 Cluster sharding

image::img/figure-14-7.png[]

* ShoppersSingleton 대신 ShardedShoppers를 통해서 Shopper에 접근한다.
* ShardRegion은 Cluster Sharding 모듈이 내부적으로 만들어주는 Actor
** ShardRegion은 노드마다 하나 생성된다.
** Cluster Singleton인 ShardingCordinator가 내부적으로 만들어진다. ShardingCordinator가 ShardRegion을 Cordination한다.
* ShardedShopper가 실제로 Shopper의 역활이다.
** Sharded Actor를 **entry**라고 부른다.

.ShardedShopppers
[source, scala]
----
package aia.persistence.sharded

import akka.actor._
import akka.contrib.pattern.ClusterSharding
import aia.persistence._

object ShardedShoppers {
    def props= Props(new ShardedShoppers)
    def name = "sharded-shoppers"
}

class ShardedShoppers extends Actor {
    ClusterSharding(context.system).start(
        typeName = ShardedShopper.shardName, // <1>
        entryProps = Some(ShardedShopper.props), // <2>
        idExtractor = ShardedShopper.idExtractor, // <3>
        shardResolver = ShardedShopper.shardResolver // <4>
    )

    def shardedShopper = {
        ClusterSharding(context.system)
            .shardRegion(ShardedShopper.shardName) // <5>
    }

    def receive = {
        case cmd: Shopper.Command =>
            shardedShopper forward cmd
    }
}
----
<1> entry의 이름
<2> entry의 props
<3> Command의 id를 추출하는 함수.
<4> Command의 id로 Shard Id를 구하는 함수.
<5> Sharded Shopper를 얻어온다. 내부적으로 ShardedShopper를 만들어서 ActorRef(Shard를 반환하는 해준다는 거 아닐까)

.ShardedShopper
[source, scala]
----
package aia.persistence.sharded

import scala.concurrent.duration._
import akka.actor._
import akka.contrib.pattern.ShardRegion
import akka.contrib.pattern.ShardRegion.Passivate
import aia.persistence._

object ShardedShopper {
    def props = Props(new ShardedShopper)
    def name(shopperId: Long) = shopperId.toString

    case object StopShopping // <1>

    val shardName: String = "shoppers" // <2>

    val idExtractor: ShardRegion.IdExtractor = {
        case cmd: Shopper.Command => (cmd.shopperId.toString, cmd) // <3>
    }

    val shardResolver: ShardRegion.ShardResolver = {
        case cmd: Shopper.Command => (cmd.shopperId % 12).toString // <4>
    }
}

class ShardedShopper extends Shopper { // <5>
    import ShardedShopper._

    context.setReceiveTimeout(Settings(context.system).passivateTimeout) // <6>

    override def unhandled(msg: Any) = msg match {
        case ReceiveTimeout => // <7>
            context.parent ! Passivate(stopMessage = ShardedShopper.StopShopping)
        case StopShopping => context.stop(self) // <8>
    }
}
----
<1> ShardedShopper 리소스를 종료하는데 필요하다.
<2> shardName을 반환한다.
<3> Command에서 Id를 추출
<4> Id로 ShardId를 구함.
<5> PersistenceActor가 아니다. akka-persistence 장이라 책이 출간되면 변경되려나.
<6> ReceiveTimeout을 설정할 수가 있다. 메시지를 일정 시간동안 메시지가 오지 않으면 Timeout된다.
<7> context.parent(ShardRegion)에 Passivate 메시지를 보낸다. ShardRegion이 Passivate시켜야 한다고 판단하면 다시 stopMessage를 보내준다.
<8> Passivate를 허가 받았다.ㅎㅎ

==== 14.4 Summary
