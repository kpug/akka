== 12. System Integration

:numbered!:

In this chapter:

* Camel
* Endpoint
* Rest
* Spray
* Consumer/Producer

Camel 소개, Spray 소개

=== 12.1 Message endpoints

Endpoint는 시스템 사이의 glue!

Consumer Endpoint: Receiver Side

image::img/figure-12-1.png[]

Producer Endpoint: Sender Side

image::img/figure-12-2.png[]

==== 12.1.1 Normalizer

* `n:1` 관계에 적합.
* Normalizer 패턴은 다양한 메시지를 Common 메시지로 변환하는 것이 핵심.
** Translator를 재사용 할 수 있다.
* Router 패턴과 Translator 패턴을 이용해서 하나의 Endpoint로 결합 시킨다.

image::img/figure-12-4.png[]

* Router는 Message Type에 따라 해당 Translator로 Route 한다.
* Message Type이 다양한 Endpoint에 이 패턴을 적용하면 좋다.
* flexibility와 complextity는 한 몸이라 trade-off가 있다. 그러니 적절히 선택해야 한다.

==== 12.1.2 Canonical Data Model

* `n:n` 관계에 적함.
** Normalizer 패턴을 `n:n` 관계에 적용하면 Endpoint가 지수적으로 증가한다.
* **Consumer Endpoint의 메시지를 Canonical Message로 변환하고 이 Canonical Message를 Producer Endpoint로 보낸다.**

image::img/figure-12-7.png[]

=== 12.2 Implementing endpoints using the Camel framework

* Endpoint를 구현할 때 Transport Layer도 쎄빠지게 구현해야 하는데 누가 해놓은게 있으면 좋지 않겠니?
** 응! Camel framework이 있어.
* Camel Framework
** Enterprize Integration 분야에서 Camel이 기여하는 것.
*** Concrete implementations of the widely used Enterprise Integration Patterns
*** Connectivity to a great variety of transports and APIs
*** Easy to use Domain Specific Languages(DSLs) to wire EIPs and transports together
** Transport 구현이 완벽하게 추상화 돼 있고 런타임에 결정할 수 있다.
** Camel이 제공하는 Transport layer 구현체들: http://camel.apache.org/components.html

Akka를 Camel로 확장하기:

[source, scala]
----
val camelExtension = CamelExtensionn(system)
----

==== 12.2.1 Implement a consumer endpoint receiving messages from an external System

살펴보는 예제:

image::img/figure-12-8.png[]

* Bookshop에서 메시지를 받는 Order System.
** 메시지는 XML이라고 가정.
** Transport Layer는 File system을 사용.
** Endpoint는 XML 메시지를 받아서 Order System이 처리할 수 있는 메시지로 변환한다.

===== Implementing a Camel consumer

image::img/figure-12-9.png[]

* endpointUri가 뭔지 설정하고
* CamelMessage를 받아서 처리하는 receive 메소드를 구현해주면 끝.
** CamelMessage는 실제 메시지인 body가 있고
** 프로토콜에 따라 다른 a map of headers가 있다.

.OrderConsumerXml
[source, scala]
----
case class Order(customerId: String, productId: String, number: Int) // <1>

class OrderConsumerXml(uri: String, next: ActorRef)
  extends Consumer { // <2>

  def endpointUri = uri // <3>

  def receive = {
    case msg: CamelMessage => { // <4>
      val content = msg.bodyAs[String]
      val xml = XML.loadString(content)
      val order = xml \\ "order"
      val customer = (order \\ "customerId").text
      val productId = (order \\ "productId").text
      val number = (order \\ "number").text.toInt
      next ! new Order(customer, productId, number) // <5>
    }
  }
}
----
<1> Order case 클래스
<2> Consumer를 구현함.
<3> uri를 설정한다.
<4> CamelMessage를 처리한다.
<5> 메시지를 변환해서 전송한다.

.OrderConsumerXml Test
[source, scala]
----
val probe = TestProbe()
val camelUri = "file:messages" <1>
val consumer = system.actorOf(
Props(new OrderConsumerXml(camelUri, probe.ref)))

val camelExtention = CamelExtension(system)
val activated = camelExtention.activationFutureFor( // <2>
    consumer)(timeout = 10 seconds, executor = system.dispatcher)
Await.result(activated, 5 seconds) // <3>

val msg = new Order("me", "Akka in Action", 10)
val xml = <order>
            <customerId>{ msg.customerId }</customerId>
            <productId>{ msg.productId }</productId>
            <number>{ msg.number }</number>
        </order> // <4>
val msgFile = new File(dir, "msg1.xml")

FileUtils.write(msgFile, xml.toString()) // <5>

probe.expectMsg(msg) // <6>

system.stop(consumer)
----
<1> file protocol(component)
<2> camelExtension 만드는데 시간이 들어가서 Future를 리턴받는다.
<3> consumer가 만들어질 때까지 대기
<4> bookshop이 보내는 메시지
<5> send!
<6> msg가 변환이 잘 됐는지 Expect한다.

===== Changing the transport layer of our consumer

Transport Layer를 file에서 tcp로 변환한다.

.TCP를 사용하는 Test
[source, scala]
----
val probe = TestProbe()
val camelUri = "mina:tcp://localhost:8888?textline=true&sync=false" // <1>
val consumer = system.actorOf(
    Props(new OrderConsumerXml(camelUri, probe.ref)))
val activated = CamelExtension(system).activationFutureFor(
    consumer)(timeout = 10 seconds, executor = system.dispatcher)
Await.result(activated, 5 seconds)

val msg = new Order("me", "Akka in Action", 10)
val xml = <order>
            <customerId>{ msg.customerId }</customerId>
            <productId>{ msg.productId }</productId>
            <number>{ msg.number }</number>
        </order>

val xmlStr = xml.toString().replace("\n", "") // <2>
val sock = new Socket("localhost", 8888)
val ouputWriter = new PrintWriter(sock.getOutputStream, true)
ouputWriter.println(xmlStr) // <3>
ouputWriter.flush()

probe.expectMsg(msg)

ouputWriter.close()
system.stop(consumer)
----
<1> protocol을 tcp로 변경.
<2> `\n`를 삭제, `textline=true`는 `\n` 단위로 하나의 메시지로 처리하므로 삭제한다.
<3> xml메시지를 TCP로 전송한다.

`mina:tcp`의 옵션설명:

* `textline=true`: 메시지가 plain text이고 하나의 메시지는 `\n`로 끝난다.
* sync=false: true가 기본값. response를 받으려면 true로 해야 한다.

.Response를 보내는 OrderConfirmConsumerXml
[source, scala]
----
class OrderConfirmConsumerXml(uri: String, next: ActorRef)
  extends Consumer {

  def endpointUri = uri

  def receive = {
    case msg: CamelMessage => {
      try { <1>
        val content = msg.bodyAs[String]
        val xml = XML.loadString(content)
        val order = xml \\ "order"
        val customer = (order \\ "customerId").text
        val productId = (order \\ "productId").text
        val number = (order \\ "number").text.toInt
        next ! new Order(customer, productId, number)
        sender() ! "<confirm>OK</confirm>" // <2>
      } catch {
        case ex: Exception =>
          sender() ! "<confirm>%s</confirm>".format(ex.getMessage)
      }
    }
  }
}
----
<1> `try`로 감싸서 Exception이 발생하지 않도록 해야 한다. Exception이 발생하면 Actor가 Restart돼고 Restart Hook으로 상태를 복원한다해도 Sender() 정보가 날라가기 때문에 필요하다.
<2> Sender(bookshop)에 확인 메시지를 보낸다. 이렇게 보내 면 TCP Response로 전송된다.

.OrderConfirmConsumerXml Test
[source, scala]
----
val probe = TestProbe()
val camelUri = "mina:tcp://localhost:8887?textline=true" // <1>
val consumer = system.actorOf(
    Props(new OrderConfirmConsumerXml(camelUri, probe.ref)))
val activated = CamelExtension(system).activationFutureFor(
    consumer)(timeout = 10 seconds, executor = system.dispatcher)
Await.result(activated, 5 seconds)

val msg = new Order("me", "Akka in Action", 10)
val xml = <order>
            <customerId>{ msg.customerId }</customerId>
            <productId>{ msg.productId }</productId>
            <number>{ msg.number }</number>
        </order>

val xmlStr = xml.toString().replace("\n", "")
val sock = new Socket("localhost", 8887)
val ouputWriter = new PrintWriter(sock.getOutputStream, true)
ouputWriter.println(xmlStr)
ouputWriter.flush()
val responseReader = new BufferedReader(
    new InputStreamReader(sock.getInputStream))
var response = responseReader.readLine() // <2>
response must be("<confirm>OK</confirm>") <3>
probe.expectMsg(msg) // <4>

responseReader.close()
ouputWriter.close()
system.stop(consumer)
----
<1> sync=true가 default라서 생략한다.
<2> Response를 기다린다.
<3> Response를 잘 받았다.
<4> Order System도 Request를 잘 받았다.

===== Using the Camel context

[source, scala]
----
val probe = TestProbe()

val camelContext = CamelExtension(system).context // <1>
camelContext.addComponent("activemq",
    ActiveMQComponent.activeMQComponent(
    "vm:(broker:(tcp://localhost:8899)?persistent=false)"))

val camelUri = "activemq:queue:xmlTest" // <2>
val consumer = system.actorOf(
    Props(new OrderConsumerXml(camelUri, probe.ref)))

val activated = CamelExtension(system).activationFutureFor(
    consumer)(timeout = 10 seconds, executor = system.dispatcher)
Await.result(activated, 5 seconds)

val msg = new Order("me", "Akka in Action", 10)
val xml = <order>
            <customerId>{ msg.customerId }</customerId>
            <productId>{ msg.productId }</productId>
            <number>{ msg.number }</number>
        </order>

sendMQMessage(xml.toString()) // <3>
probe.expectMsg(msg)

system.stop(consumer)

val brokers = BrokerRegistry.getInstance().getBrokers  // <4>
brokers.foreach { case (name, broker) => broker.stop() }
----
<1> CamelContext를 이용해서 MQ를 추가한다.
<2> endpointUri를 mq로 설정한다.
<3> xml 메지를 mq에 보낸다.
<4> 다 끝났으면 Broker를 stop시킨다. BrokerRegistry를 이용해서 broker를 끌 수 있다.

==== 12.2.2 Implement a producer endpoint sending messages to an external system

Procucer 시나리오:

image::img/figure-12-10.png[]

Procucer 구현:

image::img/figure-12-11.png[]

* Producer는 receive 함수를 구현돼 있다. 그냥 endpointUri만 알려줘도 잘 동작한다.

.Test Simple Producer
[source, scala]
----
implicit val ExecutionContext = system.dispatcher
val probe = TestProbe()

val consumer = system.actorOf(
    Props(new OrderConfirmConsumerXml(camelUri, probe.ref)))
val producer = system.actorOf(
    Props(new SimpleProducer(camelUri))) // <1>
val activatedCons = CamelExtension(system).activationFutureFor(
consumer)(timeout = 10 seconds, executor = system.dispatcher)
val activatedProd = CamelExtension(system).activationFutureFor(
producer)(timeout = 10 seconds, executor = system.dispatcher)

val camel = Future.sequence(List(activatedCons, activatedProd)) / <2>

Await.result(camel, 5 seconds)
----
<1> producer를 생성
<2> `Future.sequence`로 두 Future를 하나로 합친다.

=== 12.3 Example of implementing a REST interface

.Translate message in Producer
[source, scala]
----
class OrderProducerXml(uri: String) extends Producer {
    def endpointUri = uri
    override def oneway: Boolean = false // <1>

    override protected def transformOutgoingMessage(message: Any): Any =
    { // <2>
        message match {
            case msg: Order =>
                val xml = <order>
                        <customerId>{ msg.customerId }</customerId>
                        <productId>{ msg.productId }</productId>
                        <number>{ msg.number }</number>
                    </order>
                xml.toString().replace("\n", "") // <3>
            case other => message
    }

    override def transformResponse(message: Any): Any = { // <4>
        message match {
            case msg: CamelMessage =>
                try {
                    val content = msg.bodyAs[String]
                    val xml = XML.loadString(content)
                    val res = (xml \\ "confirm").text
                    res // <5>
                } catch {
                    case ex: Exception =>
                        "TransformException: %s".format(ex.getMessage)
                }
            case other => message
        }
    }
}
----
<1> Response를 기다리지 않을 때는 true로 해야 한다. Response를 기다리는데 쓰레드가 사용되므로 잘 챙겨줘야 한다.
<2> `transformOutgoingMessage` 구현해서 Consumer Endpoint의 메시지(XML)으로 변환.
<3> 한 메시지는 `\n`으로 끝나야 하므로 중간에 있는 것은 삭제한다.
<4> Reponse Message(XML)을 값으로 변환한다.

.OrderProducerXML test
[source, scala]
----
implicit val ExecutionContext = system.dispatcher
val probe = TestProbe()
val camelUri ="mina:tcp://localhost:9889?textline=true"
val consumer = system.actorOf(
    Props(new OrderConfirmConsumerXml(camelUri, probe.ref)))
val producer = system.actorOf(
    Props(new OrderConfirmProducerXml(camelUri)))

val activatedCons = CamelExtension(system).activationFutureFor(
    consumer)(timeout = 10 seconds, executor = system.dispatcher)
val activatedProd = CamelExtension(system).activationFutureFor(
    producer)(timeout = 10 seconds, executor = system.dispatcher)

val camel = Future.sequence(List(activatedCons, activatedProd))
Await.result(camel, 5 seconds)
val probeSend = TestProbe()
val msg = new Order("me", "Akka in Action", 10)
probeSend.send(producer, msg) <1>
probe.expectMsg(msg) // <2>
probeSend.expectMsg("OK") // <3>

system.stop(producer)
system.stop(consumer)
----
<1> Producer에 Order 메시지를 보내고
<2> Comsumer에까지 Order 메시지를 잘 받아서 Transform됐는지 확인하고
<3> "OK" Response 까지 잘 받아졌는지 확인한다.

==== 12.3.1 The REST example

Rest 시나리오. POST:

image::img/figure-12-14.png[]

Rest 시나리오. GET:

image::img/figure-12-15.png[]

Rest 시나리오. GET, NoSuchOrder:

image::img/figure-12-16.png[]

ProcessingOrder 구현:

image::img/figure-12-17.png[]

HTTP 메시지를 CamelMessage로 변환해주는 Consumer가 필요하다:

[source, scala]
----
class OrderConsumerRest(uri: String, next: ActorRef)
  extends Consumer {

  def endpointUri = uri

  def receive = {
    case msg: CamelMessage => {
      try {
        val action = msg.headerAs[String](Exchange.HTTP_METHOD) // <1>
        action match {
          case Success("POST") => {
            processOrder(msg.bodyAs[String]) // <2>
          }
          ...
        }
      } catch {
        case ex: Exception =>
          sender() ! createErrorMsg(500, // Internal Server Error
            ex.getMessage)
      }
    }
  }

  //...
}
----
<1> 이 CamelMessage는 HTTP 메시지다.
<2> ProcessOrder에서 다시 CamelMessage를 만들어서 sender에 보낸다.

==== 12.3.2 Implementing a REST endpoint with Spray

HTTP/REST는 Camel보다 Spray가 더 적합하다. Test Kit도 들어 있고 HTTP/REST endpoint에 사용하는데 필요한 도구가 많이 들어 있다.

image::img/figure-12-18.png[]

* OrderService에 route를 만들고 Actor는 별도 클래스로 만들면 Route를 테스트할 때 Actor를 만들지 않고 테스트할 수 있다.

Spray Directive 포멧:

[source]
----
name(arguments) { extractions => ... // inner route }
----

[source, scala]
----
val myRoute = path("orderTest") { // <1>
    get { // <2>
        // <3>
        // parameter('id.as[Long]) { id =>
        //     val orderId = new OrderId(id)
        //     ...
        // }
        parameters('id.as[Long]).as(OrderId) { orderId => // <4>
            complete { // <5>
                val askFuture = orderSystem ? orderId
                askFuture.map { // <6>
                    case result: TrackingOrder =>
                        <statusResponse>
                        <id>{ result.id }</id>
                        <status>{ result.status }</status>
                        </statusResponse>
                    case result: NoSuchOrder =>
                        <statusResponse>
                        <id>{ result.id }</id>
                        <status>ID is unknown</status>
                        </statusResponse>
                }
            }
        }
    } ~ // <7>
    post { // <8>
    //add order
    entity(as[String]) { body => // <9>
        val order = XMLConverter.createOrder(body.toString)
        complete {
            val askFuture = orderSystem ? order
            askFuture.map {
                case result: TrackingOrder => {
                    <confirm>
                        <id>{ result.id }</id>
                        <status>{ result.status }</status>
                    </confirm>.toString()
                }
                case result: Any => {
                    <confirm>
                        <status>
                        Response is unknown{ result.toString() }
                        </status>
                    </confirm>.toString()
                }
            }
        }
    }
}
----
<1> path directive
<2> get method directive
<3> parameter directive. parameter를 Long으로 변환
<4> <3>처럼 해도 되지만 OrderId가 id Attribute가 있는 case class라면 id라는 named Parameter 로 념겨서 인스턴스를 생성해준다.
<5> 결과를 반환하는 directive
<6> orderSystem에서 Response가 오면 XML로 변환해서 Rest Response를 보내는 Future를 반환한다.
<7> directive를 연결한다. `~`가 없어도 컴파일 에러는 안나지만 `~` 뒤의 route는 무시된다. **실수 유혹쟁이**
<8> post method directive
<9> Get Request Body

===== HTTP Server

Akka IO 패키지로 서버 띄우기:

[source, scala]
----
class BootOrderServer extends App {
    val system = ActorSystem("OrderHttpServer")

    //create and start our service actor
    val service = system.actorOf(Props(
        new OrderServiceActor(orderSystem)), "my-service")

    //create a new HttpServer using our handler tell it where to bind to
    val httpServer = IO(Http)(system)
    implicit val executionContext = system.dispatcher
    implicit val timeout = Timeout(10 seconds)

    httpServer.ask(Http.Bind(listener = service,
        interface = "0.0.0.0", port = 8080))
        .mapTo[Http.Event].map {
            case Http.Bound(address) =>
                println(s"REST interface bound to $address")
            case Http.CommandFailed(cmd) =>
                println("REST interface could not bind to "0.0.0.0:8080 "
                    + cmd.failureMessage)
                system.shutdown()
    }
}
----

spray.servlet.Initializer와 spray.servlet.Servlet30ConnnectorServlet을 이용해서 Servlet Container에 올릴 수도 있다.

TestKit을 사용하는 예제도 보여주는데 생략하고 이 Spray는 따로 스터디를 해야 겠다.

=== 12.4 Summary
